{
  "openapi": "3.1.0",
  "info": {
    "title": "CHOMP API",
    "version": "0.1.7",
    "description": "Create questions and submit answers, to be resolved by CHOMP's mechanism engine. To request an API key, contact engineering@gator.so.",
    "contact": {
      "name": "API Support",
      "url": "https://t.me/+ROJHe1iywYNkODA1",
      "email": "engineering@gator.so"
    }
  },
  "servers": [
    {
      "url": "${env.BASE_URL}"
    }
  ],
  "paths": {
    "/v1/questions": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "get": {
        "summary": "Get Questions",
        "description": "Return an array with basic information about each question. For more details, query questions individually through get question endpoint.",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        },
        "operationId": "4d46e8f4-df3a-4b3f-a54b-3b248c18c2ef",
        "responses": {
          "200": {
            "description": "A list of questions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../schemas/GetQuestionsResponse.json"
                },
                "example": [
                  {
                    "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410",
                    "title": "Is pineapple a valid pizza topping?",
                    "description": "Settle the age-old debate once and for all.",
                    "activeAt": "2025-06-01T00:00:00Z",
                    "resolveAt": null
                  },
                  {
                    "questionId": "a2b3c4d5-e6f7-4g8h-9i0j-k1l2m3n4o5p6",
                    "title": "The CIA ran a mind control project called MK-Ultra.",
                    "description": "From lizard people to leaked documents, some theories are pure fiction—others turned out to be true. Can you tell what is real and what is conspiracy cap?",
                    "activeAt": "2025-05-01T00:00:00Z",
                    "resolveAt": "2025-05-02T00:00:00Z"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Question",
        "description": "Create a new Question that can be resolved by CHOMP's oracle. Indexes must be integers greater than 0.",
        "operationId": "6bd16c9b-fff0-4d2b-82ca-bf16adc63a99",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/CreateQuestionRequest.json"
              },
              "example": {
                "title": "The CIA ran a mind control project called MK-Ultra.",
                "options": [
                  {
                    "title": "Conspiracy",
                    "index": 1
                  },
                  {
                    "title": "Real",
                    "index": 2
                  }
                ],
                "activeAt": "2025-05-01T00:00:00Z",
                "resolveAt": "2025-05-02T00:00:00Z",
                "description": "From lizard people to leaked documents, some theories are pure fiction—others turned out to be true. Can you tell what is real and what is conspiracy cap?"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/CreateQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    },
    "/v1/questions/{questionId}/answer": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "summary": "Answer Question",
        "description": "Submit an answer for the given question. Weight defaults to 1 if not supplied. For binary questions only: firstOrderOptionId must equal secondOrderOptionId.",
        "operationId": "5f1a5f6a-fa1b-446b-b18c-790b68035623",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/AnswerQuestionRequest.json"
              },
              "example": {
                "userAddress": "CHoMP5YdLEJ62kq9oibKbNDkBCgakQPqQLSgkDHyC2D9",
                "firstOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                "secondOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                "secondOrderOptionEstimate": 0.75,
                "weight": 123.45
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnswerQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/AnswerQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    },
    "/v1/questions/{questionId}/answer/batch": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "summary": "Batch Answer Questions",
        "description": "Submit multiple answers for the given question. Weight defaults to 1 if not supplied. For binary questions only: firstOrderOptionId must equal secondOrderOptionId.\n\nMay give a global error with HTTP 4xx or 5xx or an individual answer may be rejected, in which case, the success and error fields will indicate which answers were successfully submitted.",
        "operationId": "c59d57bb-a256-41ab-8116-23aefcfc8a47",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/AnswerQuestionBatchRequest.json"
              },
              "example": [{
                "userAddress": "2JgKX9wAogW3Bk16uxEdxxNEjzYt3J1XtzFXWCtTMkw5",
                "firstOrderOptionId": "965f5829-8725-480c-ab2f-f49eb3fc681f",
                "secondOrderOptionId": "b2a4389d-e7ac-4cc6-a23d-8e23390a8ce2",
                "secondOrderOptionEstimate": 0.75,
                "weight": 123.45
              },{
                "userAddress": "GRD8dLWy8YFLoAJr2d6JgSX94cyTngLJqqmgKsPg4WrV",
                "firstOrderOptionId": "965f5829-8725-480c-ab2f-f49eb3fc681f",
                "secondOrderOptionId": "b2a4389d-e7ac-4cc6-a23d-8e23390a8ce2",
                "secondOrderOptionEstimate": 0.75,
                "weight": 123.45
              }]
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnswerQuestionBatch200"
          },
          "400": {
            "$ref": "#/components/responses/AnswerQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    },
    "/v1/questions/{questionId}": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "put": {
        "summary": "Update Question",
        "description": "Update the resolveAt timestamp for a question.",
        "operationId": "e4c2d3a4-5678-4fab-9abc-def012345678",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../schemas/UpdateQuestionRequest.json"
              },
              "example": {
                "resolveAt": "2025-05-03T00:00:00Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/UpdateQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      },
      "get": {
        "summary": "Get Question & Results",
        "description": "Retrieve answers, option scores, and best option for the specified question. answerScore is 0 to 2. optionScore is -1 to 1. answerScore will be positive, even if the 1st order estimate was incorrect. If there are no 2nd order answers for a given option, optionScore will be NaN and will never be the best option.",
        "operationId": "b7d8f1f2-1234-4cde-9123-abcdef012345",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/InvalidQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GetQuestionResultResponse": {
        "$ref": "../schemas/GetQuestionResultResponse.json"
      },
      "AnswerResult": {
        "$ref": "../schemas/AnswerResult.json"
      },
      "UpdateQuestionResponse": {
        "$ref": "../schemas/UpdateQuestionResponse.json"
      },
      "UpdateQuestionRequest": {
        "$ref": "../schemas/UpdateQuestionRequest.json"
      },
      "AnswerQuestionResponse": {
        "$ref": "../schemas/AnswerQuestionResponse.json"
      },
      "AnswerQuestionBatchResponse": {
        "$ref": "../schemas/AnswerQuestionBatchResponse.json"
      },
      "AnswerQuestionRequest": {
        "$ref": "../schemas/AnswerQuestionRequest.json"
      },
      "GetQuestionsResponse": {
        "$ref": "../schemas/GetQuestionsResponse.json"
      },
      "Question": {
        "$ref": "../schemas/Question.json"
      },
      "CreateQuestionResponse": {
        "$ref": "../schemas/CreateQuestionResponse.json"
      },
      "CreateQuestionRequest": {
        "$ref": "../schemas/CreateQuestionRequest.json"
      },
      "OptionOutput": {
        "$ref": "../schemas/OptionOutput.json"
      },
      "OptionInput": {
        "$ref": "../schemas/OptionInput.json"
      },
      "ErrorResponse": {
        "$ref": "../schemas/ErrorResponse.json"
      }
    },
    "responses": {
      "CreateQuestion200": {
        "description": "Question created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/CreateQuestionResponse.json"
            },
            "examples": {
              "default": {
                "summary": "Successful creation",
                "value": {
                  "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410",
                  "options": [
                    {
                      "optionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "index": 0
                    },
                    {
                      "optionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "CreateQuestion400": {
        "description": "Invalid question creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/ErrorResponse.json"
            },
            "examples": {
              "option_invalid": {
                "summary": "Option missing title or index",
                "value": {
                  "error": "option_invalid",
                  "message": "Each option must include both title and index"
                }
              },
              "question_invalid_title": {
                "summary": "Title must be defined",
                "value": {
                  "error": "question_invalid",
                  "message": "Title must be defined"
                }
              },
              "question_invalid_options_count": {
                "summary": "Exactly 2 or 4 options must be provided",
                "value": {
                  "error": "question_invalid",
                  "message": "Exactly 2 or 4 options must be provided"
                }
              },
              "question_invalid_resolves_at": {
                "summary": "resolveAt must be after activeAt",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be after activeAt"
                }
              }
            }
          }
        }
      },
      "AnswerQuestion200": {
        "description": "Answer submitted successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/AnswerQuestionResponse.json"
            },
            "examples": {
              "default": {
                "summary": "Successful answer",
                "value": {
                  "answerId": "d3b082a2-1e21-4a8c-9d03-84b8f9cf0660"
                }
              }
            }
          }
        }
      },
      "AnswerQuestion400": {
        "description": "Invalid answer submission",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/ErrorResponse.json"
            },
            "examples": {
              "answer_invalid_missing": {
                "summary": "Missing required fields",
                "value": {
                  "error": "answer_invalid",
                  "message": "userAddress, firstOrderOptionId, secondOrderOptionId, and secondOrderOptionEstimate are required"
                }
              },
              "answer_invalid_option_mismatch": {
                "summary": "Option IDs do not belong to the same question",
                "value": {
                  "error": "answer_invalid",
                  "message": "firstOrderOptionId does not belong to the same question as secondOrderOptionId"
                }
              },
              "answer_invalid_estimate_range": {
                "summary": "secondOrderOptionEstimate must be 0-1",
                "value": {
                  "error": "answer_invalid",
                  "message": "secondOrderOptionEstimate must be between 0 and 1 inclusive"
                }
              },
              "answer_invalid_duplicate": {
                "summary": "User already answered",
                "value": {
                  "error": "answer_invalid",
                  "message": "userAddress has already submitted an answer for this question"
                }
              },
              "answer_invalid_resolved": {
                "summary": "Question already resolved",
                "value": {
                  "error": "answer_invalid",
                  "message": "Cannot answer question that has already resolved"
                }
              },
              "option_invalid": {
                "summary": "Invalid option IDs",
                "value": {
                  "error": "option_invalid",
                  "message": "firstOrderOptionId or secondOrderOptionId is not a valid id"
                }
              },
              "user_invalid": {
                "summary": "User account error",
                "value": {
                  "error": "user_invalid",
                  "message": "Could not find or create user account"
                }
              }
            }
          }
        }
      },
      "AnswerQuestionBatch200": {
        "description": "Answers submitted successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/AnswerQuestionBatchResponse.json"
            },
            "examples": {
              "default": {
                "summary": "One successful answer, one failed answer",
                "value": [{
                  "success": true,
                  "answerId": "d3b082a2-1e21-4a8c-9d03-84b8f9cf0660"
                }, {
                  "success": false,
                  "error": "option_invalid",
                  "errorMsg": "First order option not valid"
                }]
              }
            }
          }
        }
      },
      "UpdateQuestion200": {
        "description": "Question updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/UpdateQuestionResponse.json"
            },
            "examples": {
              "default": {
                "summary": "Successful update",
                "value": {
                  "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410"
                }
              }
            }
          }
        }
      },
      "UpdateQuestion400": {
        "description": "Invalid question update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/ErrorResponse.json"
            },
            "examples": {
              "question_invalid_not_found": {
                "summary": "Question not found",
                "value": {
                  "error": "question_invalid",
                  "message": "There is no question with that ID"
                }
              },
              "question_invalid_resolves_at_sequence": {
                "summary": "resolveAt must be after activeAt",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be after activeAt"
                }
              },
              "question_invalid_resolves_at_future": {
                "summary": "resolveAt must be in the future",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be in the future"
                }
              }
            }
          }
        }
      },
      "GetQuestion200": {
        "description": "Question results",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/GetQuestionResultResponse.json"
            },
            "examples": {
              "default": {
                "summary": "Example results",
                "value": {
                  "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410",
                  "title": "The CIA ran a mind control project called MK-Ultra.",
                  "description": "From lizard people to leaked documents, some theories are pure fiction—others turned out to be true. Can you tell what is real and what is conspiracy cap?",
                  "activeAt": "2025-05-01T00:00:00Z",
                  "resolveAt": "2025-05-02T00:00:00Z",
                  "answers": [
                    {
                      "firstOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "secondOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "secondOrderOptionEstimate": 0.7,
                      "answerScore": 1.5,
                      "answerId": "d3b082a2-1e21-4a8c-9d03-84b8f9cf0660"
                    },
                    {
                      "firstOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "secondOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "secondOrderOptionEstimate": 0.6,
                      "answerScore": 2,
                      "answerId": "b7e692c4-5a5d-4855-906d-38ba18268504"
                    }
                  ],
                  "options": [
                    {
                      "optionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "title": "Conspiracy",
                      "optionScore": 0.9
                    },
                    {
                      "optionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "title": "Real",
                      "optionScore": -0.1
                    }
                  ],
                  "bestOption": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83"
                }
              }
            }
          }
        }
      },
      "InvalidQuestion400": {
        "description": "Invalid question ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "../schemas/ErrorResponse.json"
            },
            "examples": {
              "question_invalid": {
                "summary": "Question not found",
                "value": {
                  "error": "question_invalid",
                  "message": "No question exists with this id"
                }
              }
            }
          }
        }
      }
    }
  }
}
