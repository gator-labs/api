{
  "openapi": "3.1.0",
  "info": {
    "version": "0.1.5",
    "title": "CHOMP API",
    "description": "Create questions and submit answers, to be resolved by CHOMP's mechanism engine. To request an API key, contact engineering@gator.so.",
    "contact": {
      "name": "API Support",
      "url": "https://t.me/+ROJHe1iywYNkODA1",
      "email": "engineering@gator.so"
    }
  },
  "servers": [
    {
      "url": "https://api.chomp.games"
    }
  ],
  "paths": {
       "/v1/questions": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "summary": "Create Question",
        "description": "Create a new Question that can be resolved by CHOMP's oracle. Indexes must be integers greater than 0.",
        "operationId": "6bd16c9b-fff0-4d2b-82ca-bf16adc63a99",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestionRequest"
              },
              "example": {
                "title": "The CIA ran a mind control project called MK-Ultra.",
                "options": [
                  {
                    "title": "Conspiracy",
                    "index": 1
                  },
                  {
                    "title": "Real",
                    "index": 2
                  }
                ],
                "activeAt": "2025-05-01T00:00:00Z",
                "resolveAt": "2025-05-02T00:00:00Z",
                "description": "From lizard people to leaked documents, some theories are pure fictionâ€”others turned out to be true. Can you tell what is real and what is conspiracy cap?"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/CreateQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      },
      "get": {
        "summary": "Get Questions",
        "description": "",
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        },
        "operationId": "4d46e8f4-df3a-4b3f-a54b-3b248c18c2ef"
      }
    },
    "/v1/questions/{questionId}/answer": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "post": {
        "summary": "Answer Question",
        "description": "Submit an answer for the given question",
        "operationId": "5f1a5f6a-fa1b-446b-b18c-790b68035623",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnswerQuestionRequest"
              },
              "example": {
                "userAddress": "CHoMP5YdLEJ62kq9oibKbNDkBCgakQPqQLSgkDHyC2D9",
                "firstOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                "secondOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                "secondOrderOptionEstimate": 0.75
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AnswerQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/AnswerQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    },
    "/v1/questions/{questionId}": {
      "x-zuplo-path": {
        "pathMode": "open-api"
      },
      "put": {
        "summary": "Update Question",
        "description": "Update the resolveAt timestamp for a question.",
        "operationId": "e4c2d3a4-5678-4fab-9abc-def012345678",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestionRequest"
              },
              "example": {
                "resolveAt": "2025-05-03T00:00:00Z"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/UpdateQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      },
      "get": {
        "summary": "Get Question & Results",
        "description": "Retrieve answers, option scores, and best option for the specified question. answerScore is 0 to 2. optionScore is -1 to 1.",
        "operationId": "b7d8f1f2-1234-4cde-9123-abcdef012345",
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetQuestion200"
          },
          "400": {
            "$ref": "#/components/responses/InvalidQuestion400"
          }
        },
        "x-zuplo-route": {
          "corsPolicy": "anything-goes",
          "handler": {
            "export": "urlForwardHandler",
            "module": "$import(@zuplo/runtime)",
            "options": {
              "baseUrl": "${env.BASE_URL}"
            }
          },
          "policies": {
            "inbound": [
              "api-key-inbound",
              "rate-limit-inbound",
              "add-user-metadata",
              "set-headers-inbound"
            ]
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OptionInput": {
        "type": "object",
        "title": "Array of question options",
        "properties": {
          "title": {
            "type": "string",
            "description": "The text of the option"
          },
          "index": {
            "type": "integer",
            "minimum": 0,
            "description": "Sequential integer starting at 0. Typically corresponds to the order that the option will be displayed in the UI."
          }
        },
        "required": [
          "title",
          "index"
        ],
        "additionalProperties": false
      },
      "OptionOutput": {
        "type": "object",
        "title": "OptionOutput",
        "properties": {
          "optionId": {
            "type": "string",
            "format": "uuid"
          },
          "index": {
            "type": "integer",
            "minimum": 0,
            "description": "Sequential integer starting at 0"
          }
        },
        "required": [
          "optionId",
          "index"
        ],
        "additionalProperties": false
      },
      "CreateQuestionRequest": {
        "type": "object",
        "title": "CreateQuestionRequest",
        "properties": {
          "title": {
            "type": "string",
            "description": "The text of the question"
          },
          "options": {
            "title": "Options array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionInput"
            },
            "minItems": 2,
            "maxItems": 4,
            "description": "Must contain exactly 2 or 4 options."
          },
          "activeAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp for when voting starts."
          },
          "resolveAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp for when voting ends."
          },
          "rules": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "imageUrl": {
            "type": "string",
            "format": "uri"
          },
          "onChainAddress": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "options",
          "activeAt"
        ],
        "additionalProperties": false
      },
      "CreateQuestionResponse": {
        "type": "object",
        "title": "CreateQuestionResponse",
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid"
          },
          "options": {
            "title": "Options array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionOutput"
            }
          }
        },
        "required": [
          "questionId",
          "options"
        ],
        "additionalProperties": false
      },
      "AnswerQuestionRequest": {
        "type": "object",
        "title": "AnswerQuestionRequest",
        "properties": {
          "userAddress": {
            "type": "string"
          },
          "firstOrderOptionId": {
            "type": "string",
            "format": "uuid"
          },
          "secondOrderOptionId": {
            "type": "string",
            "format": "uuid",
            "description": "firstOrderOptionId and secondOrderOptionId can be the same or different. In CHOMP, secondOrderOptionId is randomized, but this is not a requirement of the API."
          },
          "secondOrderOptionEstimate": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          }
        },
        "required": [
          "userAddress",
          "firstOrderOptionId",
          "secondOrderOptionId",
          "secondOrderOptionEstimate"
        ],
        "additionalProperties": false
      },
      "AnswerQuestionResponse": {
        "type": "object",
        "title": "AnswerQuestionResponse",
        "properties": {
          "answerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "answerId"
        ],
        "additionalProperties": false
      },
      "UpdateQuestionRequest": {
        "type": "object",
        "title": "UpdateQuestionRequest",
        "properties": {
          "resolveAt": {
            "type": "string",
            "format": "date-time",
            "description": "UTC timestamp for when voting ends."
          }
        },
        "required": [
          "resolveAt"
        ],
        "additionalProperties": false
      },
      "UpdateQuestionResponse": {
        "type": "object",
        "title": "UpdateQuestionResponse",
        "properties": {
          "questionId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "questionId"
        ],
        "additionalProperties": false
      },
      "AnswerResult": {
        "type": "object",
        "title": "AnswerResult",
        "properties": {
          "firstOrderOptionId": {
            "type": "string",
            "format": "uuid"
          },
          "secondOrderOptionId": {
            "type": "string",
            "format": "uuid"
          },
          "secondOrderOptionEstimate": {
            "type": "number",
            "minimum": 0,
            "maximum": 1
          },
          "answerScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 2
          },
          "answerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "firstOrderOptionId",
          "secondOrderOptionId",
          "secondOrderOptionEstimate",
          "answerScore",
          "answerId"
        ],
        "additionalProperties": false
      },
      "GetQuestionResponse": {
        "type": "object",
        "title": "GetQuestionResponse",
        "properties": {
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerResult"
            }
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "optionId": {
                  "type": "string",
                  "format": "uuid"
                },
                "optionScore": {
                  "type": "number"
                }
              },
              "required": [
                "optionId",
                "optionScore"
              ],
              "additionalProperties": false
            }
          },
          "bestOption": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "answers",
          "options",
          "bestOption"
        ],
        "additionalProperties": false
      },
      "ErrorResponse": {
        "type": "object",
        "title": "ErrorResponse",
        "properties": {
          "error": {
            "type": "string",
            "description": "Machine readable error code"
          },
          "message": {
            "type": "string",
            "description": "Human readable error description"
          }
        },
        "required": [
          "error",
          "message"
        ],
        "additionalProperties": false
      }
    },
    "responses": {
      "CreateQuestion200": {
        "description": "Question created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateQuestionResponse"
            },
            "examples": {
              "default": {
                "summary": "Successful creation",
                "value": {
                  "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410",
                  "options": [
                    {
                      "optionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "index": 0
                    },
                    {
                      "optionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "CreateQuestion400": {
        "description": "Invalid question creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "option_invalid": {
                "summary": "Option missing title or index",
                "value": {
                  "error": "option_invalid",
                  "message": "Each option must include both title and index"
                }
              },
              "question_invalid_title": {
                "summary": "Title must be defined",
                "value": {
                  "error": "question_invalid",
                  "message": "Title must be defined"
                }
              },
              "question_invalid_options_count": {
                "summary": "Exactly 2 or 4 options must be provided",
                "value": {
                  "error": "question_invalid",
                  "message": "Exactly 2 or 4 options must be provided"
                }
              },
              "question_invalid_resolves_at": {
                "summary": "resolveAt must be after activeAt",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be after activeAt"
                }
              }
            }
          }
        }
      },
      "AnswerQuestion200": {
        "description": "Answer submitted successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AnswerQuestionResponse"
            },
            "examples": {
              "default": {
                "summary": "Successful answer",
                "value": {
                  "answerId": "d3b082a2-1e21-4a8c-9d03-84b8f9cf0660"
                }
              }
            }
          }
        }
      },
      "AnswerQuestion400": {
        "description": "Invalid answer submission",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "answer_invalid_missing": {
                "summary": "Missing required fields",
                "value": {
                  "error": "answer_invalid",
                  "message": "userAddress, firstOrderOptionId, secondOrderOptionId, and secondOrderOptionEstimate are required"
                }
              },
              "answer_invalid_option_mismatch": {
                "summary": "Option IDs do not belong to the same question",
                "value": {
                  "error": "answer_invalid",
                  "message": "firstOrderOptionId does not belong to the same question as secondOrderOptionId"
                }
              },
              "answer_invalid_estimate_range": {
                "summary": "secondOrderOptionEstimate must be 0-1",
                "value": {
                  "error": "answer_invalid",
                  "message": "secondOrderOptionEstimate must be between 0 and 1 inclusive"
                }
              },
              "answer_invalid_duplicate": {
                "summary": "User already answered",
                "value": {
                  "error": "answer_invalid",
                  "message": "userAddress has already submitted an answer for this question"
                }
              },
              "answer_invalid_resolved": {
                "summary": "Question already resolved",
                "value": {
                  "error": "answer_invalid",
                  "message": "Cannot answer question that has already resolved"
                }
              },
              "option_invalid": {
                "summary": "Invalid option IDs",
                "value": {
                  "error": "option_invalid",
                  "message": "firstOrderOptionId or secondOrderOptionId is not a valid id"
                }
              },
              "user_invalid": {
                "summary": "User account error",
                "value": {
                  "error": "user_invalid",
                  "message": "Could not find or create user account"
                }
              }
            }
          }
        }
      },
      "UpdateQuestion200": {
        "description": "Question updated successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateQuestionResponse"
            },
            "examples": {
              "default": {
                "summary": "Successful update",
                "value": {
                  "questionId": "71f3d63e-ebe6-4f77-9d7f-57d948e9c410"
                }
              }
            }
          }
        }
      },
      "UpdateQuestion400": {
        "description": "Invalid question update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "question_invalid_not_found": {
                "summary": "Question not found",
                "value": {
                  "error": "question_invalid",
                  "message": "There is no question with that ID"
                }
              },
              "question_invalid_resolves_at_sequence": {
                "summary": "resolveAt must be after activeAt",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be after activeAt"
                }
              },
              "question_invalid_resolves_at_future": {
                "summary": "resolveAt must be in the future",
                "value": {
                  "error": "question_invalid",
                  "message": "resolveAt must be in the future"
                }
              }
            }
          }
        }
      },
      "GetQuestion200": {
        "description": "Question results",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetQuestionResponse"
            },
            "examples": {
              "default": {
                "summary": "Example results",
                "value": {
                  "answers": [
                    {
                      "firstOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "secondOrderOptionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "secondOrderOptionEstimate": 0.7,
                      "answerScore": 1.5,
                      "answerId": "d3b082a2-1e21-4a8c-9d03-84b8f9cf0660"
                    },
                    {
                      "firstOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "secondOrderOptionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "secondOrderOptionEstimate": 0.6,
                      "answerScore": 2,
                      "answerId": "b7e692c4-5a5d-4855-906d-38ba18268504"
                    }
                  ],
                  "options": [
                    {
                      "optionId": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83",
                      "optionScore": 0.9
                    },
                    {
                      "optionId": "1fee3d61-9ab0-4cff-97e8-3e1c000ae2e2",
                      "optionScore": -0.1
                    }
                  ],
                  "bestOption": "9a5e5b4e-4f00-4fbd-999f-888e0e713a83"
                }
              }
            }
          }
        }
      },
      "InvalidQuestion400": {
        "description": "Invalid question ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "question_invalid": {
                "summary": "Question not found",
                "value": {
                  "error": "question_invalid",
                  "message": "No question exists with this id"
                }
              }
            }
          }
        }
      }
    }
  }
}